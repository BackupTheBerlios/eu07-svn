This is osgTcl, a Tcl scripting front-end for osgIntrospection.
With this tiny package you can enable any Tcl interpreter, either
stand-alone (like tclsh) or embedded, to manage OSG objects through
the reflection framework (osgIntrospection).

There are basically two ways to use osgTcl:

1) compile the osgTcl module and copy the resulting shared library
to your Tcl package directory. Then create a pkgIndex.tcl as you
would do with any other Tcl package. Then you can load osgTcl in any
existing Tcl environment with the following statement:

	package require osgTcl

2) compile both osgTcl and osgsh. The latter provides a Tcl shell
that automatically loads the osgTcl package.

Please note that osgIntrospection is still experimental and so is osgTcl. 
You should consider osgTcl as a powerful toy, nothing more. This will evolve
in the future.

Have fun!

  Marco Jez
  April 2005


COMMANDS
--------

Following commands are created by osgTcl when it is loaded into a
Tcl interpreter:

* osgTcl::loadwrapper    libraryName ?libraryName ...?

  Loads one or more OSG wrapper libraries. For example, this code:

    % loadwrapper osg

  will load the library named osgwrapper_osg.dll (or .so).


* osgTcl::new    typeName

  Creates a new object through osgIntrospection. The "typeName" parameter
  is the fully qualified type name of the object to be created. This command
  returns a string representation of the object. examples:

    % loadwrapper osg
    % new int
    0
    % new osg::Group
    0DA1234

  Note that since int is a 'value type' (as defined by osgIntrospection)
  and it has streaming capabilities, its string representation is simply
  its numeric value. On the contrary osg::Group is an 'object type' which
  by definition is created on the heap, so its string representation is
  actually a numerical representation of the pointer to the object.

* osgTcl::type    ?-i? object

  Returns the fully qualified type name of the given object. If the '-i'
  option is used, the type name of the actual instance of 'object' is
  returned (this is valid for polymorphic types only). For example:

    % set root [readNodeFile cow.osg]
    0ABABAB
    % type $root
    osg::Node *
    % type -i $root
    osg::Group

* osgTcl::call    object methodName ?arg ...?

  Calls a class method on the given object. Examples:

    % set x [new osg::Group]
    0ABABAB
    % call $x setName "Hello, Node!"
    % call $x getDataVariance
    DYNAMIC

* osgTcl::pget    object propertyName ?index ...?
  osgTcl::pset    object propertyName ?index ...? value
  osgTcl::padd    object propertyName value
  osgTcl::premove object propertyName index
  osgTcl::pcount  object propertyName

  These commands allow access to object properties. pget obtains the value
  of a property, pset modifies the value of a property. Both pget and pset
  can be used with any kind of property, provided that correct indices are
  specified when accessing indexed or array properties. padd adds a new 
  item to an array property, premove deletes an item from the array and
  pcount returns the number of items stored in the array. padd, premove and
  pcount can be used with array properties only.


* osgTcl::readNodeFile    fileName
  osgTcl::writeNodeFile   object fileName

  These commands are interfaces to osgDB::readNodeFile() and
  osgDB::writeNodeFile(). Examples:

    % set root [readNodeFile cow.osg]
    0ABABAB
    % pset $root Name "Hello, Node!"
    % writeNodeFile $root hellocow.osg

